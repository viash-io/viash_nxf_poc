#!/usr/bin/env bash

# poc <not versioned>
# 
# This wrapper script is auto-generated by viash 0.5.10.1 and is thus a derivative
# work thereof. This software comes with ABSOLUTELY NO WARRANTY from Data
# Intuitive.
# 
# The component may contain files which fall under a different license. The
# authors of this component should specify the license in the header of such
# files, or include a separate license file detailing the licenses of all included
# files.
# 
# Component authors:
#  * Foo Bar <foo@bar.com> (maintainer)

set -e

if [ -z "$VIASH_TEMP" ]; then
  VIASH_TEMP=/tmp
fi

# define helper functions
# ViashQuote: put quotes around non flag values
# $1     : unquoted string
# return : possibly quoted string
# examples:
#   ViashQuote --foo      # returns --foo
#   ViashQuote bar        # returns 'bar'
#   Viashquote --foo=bar  # returns --foo='bar'
function ViashQuote {
  if [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+=.+$ ]]; then
    echo "$1" | sed "s#=\(.*\)#='\1'#"
  elif [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+$ ]]; then
    echo "$1"
  else
    echo "'$1'"
  fi
}
# ViashRemoveFlags: Remove leading flag
# $1     : string with a possible leading flag
# return : string without possible leading flag
# examples:
#   ViashRemoveFlags --foo=bar  # returns bar
function ViashRemoveFlags {
  echo "$1" | sed 's/^--*[a-zA-Z0-9_\-]*=//'
}
# ViashSourceDir: return the path of a bash file, following symlinks
# usage   : ViashSourceDir ${BASH_SOURCE[0]}
# $1      : Should always be set to ${BASH_SOURCE[0]}
# returns : The absolute path of the bash file
function ViashSourceDir {
  SOURCE="$1"
  while [ -h "$SOURCE" ]; do
    DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
    SOURCE="$(readlink "$SOURCE")"
    [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
  done
  cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd
}
# see https://en.wikipedia.org/wiki/Syslog#Severity_level
VIASH_LOGCODE_EMERGENCY=0
VIASH_LOGCODE_ALERT=1
VIASH_LOGCODE_CRITICAL=2
VIASH_LOGCODE_ERROR=3
VIASH_LOGCODE_WARNING=4
VIASH_LOGCODE_NOTICE=5
VIASH_LOGCODE_INFO=6
VIASH_LOGCODE_DEBUG=7
VIASH_VERBOSITY=$VIASH_LOGCODE_NOTICE

# ViashLog: Log events depending on the verbosity level
# usage: ViashLog 1 alert Oh no something went wrong!
# $1: required verbosity level
# $2: display tag
# $3+: messages to display
# stdout: Your input, prepended by '[$2] '.
function ViashLog {
  local required_level="$1"
  local display_tag="$2"
  shift 2
  if [ $VIASH_VERBOSITY -ge $required_level ]; then
    echo "[$display_tag]" "$@"
  fi
}

# ViashEmergency: log events when the system is unstable
# usage: ViashEmergency Oh no something went wrong.
# stdout: Your input, prepended by '[emergency] '.
function ViashEmergency {
  ViashLog $VIASH_LOGCODE_EMERGENCY emergency $@
}

# ViashAlert: log events when actions must be taken immediately (e.g. corrupted system database)
# usage: ViashAlert Oh no something went wrong.
# stdout: Your input, prepended by '[alert] '.
function ViashAlert {
  ViashLog $VIASH_LOGCODE_ALERT alert $@
}

# ViashCritical: log events when a critical condition occurs
# usage: ViashCritical Oh no something went wrong.
# stdout: Your input, prepended by '[critical] '.
function ViashCritical {
  ViashLog $VIASH_LOGCODE_CRITICAL critical $@
}

# ViashError: log events when an error condition occurs
# usage: ViashError Oh no something went wrong.
# stdout: Your input, prepended by '[error] '.
function ViashError {
  ViashLog $VIASH_LOGCODE_ERROR error $@
}

# ViashWarning: log potentially abnormal events
# usage: ViashWarning Something may have gone wrong.
# stdout: Your input, prepended by '[warning] '.
function ViashWarning {
  ViashLog $VIASH_LOGCODE_WARNING warning $@
}

# ViashNotice: log significant but normal events
# usage: ViashNotice This just happened.
# stdout: Your input, prepended by '[notice] '.
function ViashNotice {
  ViashLog $VIASH_LOGCODE_NOTICE notice $@
}

# ViashInfo: log normal events
# usage: ViashInfo This just happened.
# stdout: Your input, prepended by '[info] '.
function ViashInfo {
  ViashLog $VIASH_LOGCODE_INFO info $@
}

# ViashDebug: log all events, for debugging purposes
# usage: ViashDebug This just happened.
# stdout: Your input, prepended by '[debug] '.
function ViashDebug {
  ViashLog $VIASH_LOGCODE_DEBUG debug $@
}

# find source folder of this component
VIASH_META_RESOURCES_DIR=`ViashSourceDir ${BASH_SOURCE[0]}`

# backwards compatibility
VIASH_RESOURCES_DIR="$VIASH_META_RESOURCES_DIR"

# define meta fields
VIASH_META_FUNCTIONALITY_NAME="poc"


# ViashHelp: Display helpful explanation about this executable
function ViashHelp {
  echo "poc <not versioned>"
  echo ""
  echo "This is a multiline description"
  echo ""
  echo "Options:"
  echo "    --input_one"
  echo "        type: file, required parameter"
  echo "        example: input.txt"
  echo "        Input one."
  echo ""
  echo "    --input_multi"
  echo "        type: file, required parameter, multiple values allowed"
  echo "        example: input.txt"
  echo "        Input multiple."
  echo ""
  echo "    --input_opt"
  echo "        type: file"
  echo "        example: input.txt"
  echo "        Input optional."
  echo ""
  echo "    --output_one"
  echo "        type: file, required parameter, output"
  echo "        example: output.txt"
  echo "        Output one."
  echo ""
  echo "    --output_multi"
  echo "        type: file, multiple values allowed, output"
  echo "        example: output.txt"
  echo "        Output multiple."
  echo ""
  echo "    --output_opt"
  echo "        type: file, output"
  echo "        example: output.txt"
  echo "        Output optional."
  echo ""
  echo "    --string"
  echo "        type: string"
  echo "        default: A string"
  echo "        String"
  echo ""
  echo "    --integer"
  echo "        type: integer"
  echo "        default: 10"
  echo "        Integer"
  echo ""
  echo "    --doubles"
  echo "        type: double, multiple values allowed"
  echo "        default: 5.5:4.5"
  echo "        Doubles"
  echo ""
  echo "    --flag_true"
  echo "        type: boolean_true"
  echo "        Flag true"
  echo ""
  echo "    --flag_false"
  echo "        type: boolean_false"
  echo "        Flag false"
  echo ""
  echo "    --boolean"
  echo "        type: boolean"
  echo "        default: true"
  echo "        Boolean"
}
######## Helper functions for setting up Docker images for viash ########
# expects: ViashDockerBuild

# ViashDockerInstallationCheck: check whether Docker is installed correctly
#
# examples:
#   ViashDockerInstallationCheck
function ViashDockerInstallationCheck {
  ViashDebug "Checking whether Docker is installed"
  if [ ! command -v docker &> /dev/null ]; then
    ViashCritical "Docker doesn't seem to be installed. See 'https://docs.docker.com/get-docker/' for instructions."
    exit 1
  fi

  ViashDebug "Checking whether the Docker daemon is running"
  save=$-; set +e
  docker_version=$(docker version --format '{{.Client.APIVersion}}' 2> /dev/null)
  out=$?
  [[ $save =~ e ]] && set -e
  if [ $out -ne 0 ]; then
    ViashCritical "Docker daemon does not seem to be running. Try one of the following:"
    ViashCritical "- Try running 'dockerd' in the command line"
    ViashCritical "- See https://docs.docker.com/config/daemon/"
    exit 1
  fi
}

# ViashDockerRemoteTagCheck: check whether a Docker image is available 
# on a remote. Assumes `docker login` has been performed, if relevant.
#
# $1                  : image identifier with format `[registry/]image[:tag]`
# exit code $?        : whether or not the image was found
# examples:
#   ViashDockerRemoteTagCheck python:latest
#   echo $?                                     # returns '0'
#   ViashDockerRemoteTagCheck sdaizudceahifu
#   echo $?                                     # returns '1'
function ViashDockerRemoteTagCheck {
  docker manifest inspect $1 > /dev/null 2> /dev/null
}

# ViashDockerLocalTagCheck: check whether a Docker image is available locally
#
# $1                  : image identifier with format `[registry/]image[:tag]`
# exit code $?        : whether or not the image was found
# examples:
#   docker pull python:latest
#   ViashDockerLocalTagCheck python:latest
#   echo $?                                     # returns '0'
#   ViashDockerLocalTagCheck sdaizudceahifu
#   echo $?                                     # returns '1'
function ViashDockerLocalTagCheck {
  [ -n "$(docker images -q $1)" ]
}

# ViashDockerPull: pull a Docker image
#
# $1                  : image identifier with format `[registry/]image[:tag]`
# exit code $?        : whether or not the image was found
# examples:
#   ViashDockerPull python:latest
#   echo $?                                     # returns '0'
#   ViashDockerPull sdaizudceahifu
#   echo $?                                     # returns '1'
function ViashDockerPull {
  ViashNotice "Checking if Docker image is available at '$1'"
  if [ $VIASH_VERBOSITY -ge $VIASH_LOGCODE_INFO ]; then
    docker pull $1 && return 0 || return 1
  else
    save=$-; set +e
    docker pull $1 2> /dev/null > /dev/null
    out=$?
    [[ $save =~ e ]] && set -e
    if [ $out -ne 0 ]; then
      ViashWarning "Could not pull from '$1'. Docker image doesn't exist or is not accessible."
    fi
    return $out
  fi
}

# ViashDockerPush: push a Docker image
#
# $1                  : image identifier with format `[registry/]image[:tag]`
# exit code $?        : whether or not the image was found
# examples:
#   ViashDockerPush python:latest
#   echo $?                                     # returns '0'
#   ViashDockerPush sdaizudceahifu
#   echo $?                                     # returns '1'
function ViashDockerPush {
  ViashNotice "Pushing image to '$1'"
  save=$-; set +e
  if [ $VIASH_VERBOSITY -ge $VIASH_LOGCODE_INFO ]; then
    docker push $1
    out=$?
  else
    docker push $1 2> /dev/null > /dev/null
    out=$?
  fi
  [[ $save =~ e ]] && set -e
  if [ $out -eq 0 ]; then
    ViashNotice "Container '$VSHD_ID' push succeeded."
  else
    ViashError "Container '$VSHD_ID' push errored. You might not be logged in or have the necessary permissions."
  fi
  return $out
}

# ViashDockerPullElseBuild: pull a Docker image, else build it
#
# $1                  : image identifier with format `[registry/]image[:tag]`
# ViashDockerBuild    : a Bash function which builds a docker image, takes image identifier as argument.
# examples:
#   ViashDockerPullElseBuild mynewcomponent
function ViashDockerPullElseBuild {
  save=$-; set +e
  ViashDockerPull $1
  out=$?
  [[ $save =~ e ]] && set -e
  if [ $out -ne 0 ]; then
    ViashDockerBuild $@
  fi
}

# ViashDockerSetup: create a Docker image, according to specified docker setup strategy
#
# $1                  : image identifier with format `[registry/]image[:tag]`
# $2                  : docker setup strategy, see DockerSetupStrategy.scala
# ViashDockerBuild    : a Bash function which builds a docker image, takes image identifier as argument.
# examples:
#   ViashDockerSetup mynewcomponent alwaysbuild
function ViashDockerSetup {
  VSHD_ID="$1"
  VSHD_STRAT="$2"
  if [ "$VSHD_STRAT" == "alwaysbuild" -o "$VSHD_STRAT" == "build" -o "$VSHD_STRAT" == "b" ]; then
    ViashDockerBuild $VSHD_ID --no-cache
  elif [ "$VSHD_STRAT" == "alwayspull" -o "$VSHD_STRAT" == "pull" -o "$VSHD_STRAT" == "p" ]; then
    ViashDockerPull $VSHD_ID
  elif [ "$VSHD_STRAT" == "alwayspullelsebuild" -o "$VSHD_STRAT" == "pullelsebuild" ]; then
    ViashDockerPullElseBuild $VSHD_ID --no-cache
  elif [ "$VSHD_STRAT" == "alwayspullelsecachedbuild" -o "$VSHD_STRAT" == "pullelsecachedbuild" ]; then
    ViashDockerPullElseBuild $VSHD_ID
  elif [ "$VSHD_STRAT" == "alwayscachedbuild" -o "$VSHD_STRAT" == "cachedbuild" -o "$VSHD_STRAT" == "cb" ]; then
    ViashDockerBuild $VSHD_ID
  elif [[ "$VSHD_STRAT" =~ ^ifneedbe ]]; then
    save=$-; set +e
    ViashDockerLocalTagCheck $VSHD_ID
    outCheck=$?
    [[ $save =~ e ]] && set -e
    if [ $outCheck -eq 0 ]; then
      ViashInfo "Image $VSHD_ID already exists"
    elif [ "$VSHD_STRAT" == "ifneedbebuild" ]; then
      ViashDockerBuild $VSHD_ID --no-cache
    elif [ "$VSHD_STRAT" == "ifneedbecachedbuild" ]; then
      ViashDockerBuild $VSHD_ID
    elif [ "$VSHD_STRAT" == "ifneedbepull" ]; then
      ViashDockerPull $VSHD_ID
    elif [ "$VSHD_STRAT" == "ifneedbepullelsebuild" ]; then
      ViashDockerPullElseBuild $VSHD_ID --no-cache
    elif [ "$VSHD_STRAT" == "ifneedbepullelsecachedbuild" ]; then
      ViashDockerPullElseBuild $VSHD_ID
    else
      ViashError "Unrecognised Docker strategy: $VSHD_STRAT"
      exit 1
    fi
  elif [ "$VSHD_STRAT" == "push" -o "$VSHD_STRAT" == "forcepush" -o "$VSHD_STRAT" == "alwayspush" ]; then
    ViashDockerPush "$VSHD_ID"
  elif [ "$VSHD_STRAT" == "pushifnotpresent" -o "$VSHD_STRAT" == "gentlepush" -o "$VSHD_STRAT" == "maybepush" ]; then
    save=$-; set +e
    ViashDockerRemoteTagCheck $VSHD_ID
    outCheck=$?
    [[ $save =~ e ]] && set -e
    if [ $outCheck -eq 0 ]; then
      ViashNotice "Container '$VSHD_ID' exists, doing nothing."
    else
      ViashNotice "Container '$VSHD_ID' does not yet exist."
      ViashDockerPush "$VSHD_ID"
    fi
  elif [ "$VSHD_STRAT" == "donothing" -o "$VSHD_STRAT" == "meh" ]; then
    ViashNotice "Skipping setup."
  else
    ViashError "Unrecognised Docker strategy: $VSHD_STRAT"
    exit 1
  fi
}


######## End of helper functions for setting up Docker images for viash ########

# ViashDockerFile: print the dockerfile to stdout
# return : dockerfile required to run this component
# examples:
#   ViashDockerFile
function ViashDockerfile {
  cat << 'VIASHDOCKER'
FROM rocker/tidyverse:4.0.5

RUN :
LABEL authors="Foo Bar <foo@bar.com> (maintainer)"
LABEL org.opencontainers.image.description="Companion container for running component poc"
VIASHDOCKER
}

# ViashDockerBuild: build a docker container
# $1              : image identifier with format `[registry/]image[:tag]`
# exit code $?    : whether or not the image was built
function ViashDockerBuild {
  # create temporary directory to store dockerfile & optional resources in
  tmpdir=$(mktemp -d "$VIASH_TEMP/viashsetupdocker-poc-XXXXXX")
  function clean_up {
    rm -rf "$tmpdir"
  }
  trap clean_up EXIT

  # store dockerfile and resources
  ViashDockerfile > $tmpdir/Dockerfile
  cp -r $VIASH_META_RESOURCES_DIR/* $tmpdir

  # Build the container
  ViashNotice "Building container '$1' with Dockerfile"
  ViashInfo "Running 'docker build -t $@ $tmpdir'"
  save=$-; set +e
  if [ $VIASH_VERBOSITY -ge $VIASH_LOGCODE_INFO ]; then
    docker build -t $@ $tmpdir
  else
    docker build -t $@ $tmpdir &> $tmpdir/docker_build.log
  fi
  out=$?
  [[ $save =~ e ]] && set -e
  if [ $out -ne 0 ]; then
    ViashError "Error occurred while building container '$1'"
    if [ $VIASH_VERBOSITY -lt $VIASH_LOGCODE_INFO ]; then
      ViashError "Transcript: --------------------------------"
      cat "$tmpdir/docker_build.log"
      ViashError "End of transcript --------------------------"
    fi
    exit 1
  fi
}
# ViashAbsolutePath: generate absolute path from relative path
# borrowed from https://stackoverflow.com/a/21951256
# $1     : relative filename
# return : absolute path
# examples:
#   ViashAbsolutePath some_file.txt   # returns /path/to/some_file.txt
#   ViashAbsolutePath /foo/bar/..     # returns /foo
function ViashAbsolutePath {
  local thePath
  if [[ ! "$1" =~ ^/ ]]; then
    thePath="$PWD/$1"
  else
    thePath="$1"
  fi
  echo "$thePath" | (
    IFS=/
    read -a parr
    declare -a outp
    for i in "${parr[@]}"; do
      case "$i" in
      ''|.) continue ;;
      ..)
        len=${#outp[@]}
        if ((len==0)); then
          continue
        else
          unset outp[$((len-1))]
        fi
        ;;
      *)
        len=${#outp[@]}
        outp[$len]="$i"
      ;;
      esac
    done
    echo /"${outp[*]}"
  )
}
# ViashAutodetectMount: auto configuring docker mounts from parameters
# $1                  : The parameter value
# returns             : New parameter
# $VIASH_EXTRA_MOUNTS : Added another parameter to be passed to docker
# examples:
#   ViashAutodetectMount /path/to/bar      # returns '/viash_automount/path/to/bar'
#   ViashAutodetectMountArg /path/to/bar   # returns '-v /path/to:/viash_automount/path/to'
function ViashAutodetectMount {
  abs_path=$(ViashAbsolutePath "$1")
  if [ -d "$abs_path" ]; then
    mount_source="$abs_path"
    base_name=""
  else
    mount_source=`dirname "$abs_path"`
    base_name=`basename "$abs_path"`
  fi
  mount_target="/viash_automount$mount_source"
  echo "$mount_target/$base_name"
}
function ViashAutodetectMountArg {
  abs_path=$(ViashAbsolutePath "$1")
  if [ -d "$abs_path" ]; then
    mount_source="$abs_path"
    base_name=""
  else
    mount_source=`dirname "$abs_path"`
    base_name=`basename "$abs_path"`
  fi
  mount_target="/viash_automount$mount_source"
  echo "-v \"$mount_source:$mount_target\""
}
# ViashExtractFlags: Retain leading flag
# $1     : string with a possible leading flag
# return : leading flag
# examples:
#   ViashExtractFlags --foo=bar  # returns --foo
function ViashExtractFlags {
  echo $1 | sed 's/=.*//'
}
# initialise variables
VIASH_EXTRA_MOUNTS=''

# initialise array
VIASH_POSITIONAL_ARGS=''
VIASH_MODE='run'

while [[ $# -gt 0 ]]; do
    case "$1" in
        -h|--help)
            ViashHelp
            exit
            ;;
        ---v|---verbose)
            let "VIASH_VERBOSITY=VIASH_VERBOSITY+1"
            shift 1
            ;;
        ---verbosity)
            VIASH_VERBOSITY="$2"
            shift 2
            ;;
        ---verbosity=*)
            VIASH_VERBOSITY="$(ViashRemoveFlags "$1")"
            shift 1
            ;;
        --version)
            echo "poc <not versioned>"
            exit
            ;;
        --input_one)
            VIASH_PAR_INPUT_ONE="$2"
            shift 2
            ;;
        --input_one=*)
            VIASH_PAR_INPUT_ONE=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --input_multi)
            if [ -z "$VIASH_PAR_INPUT_MULTI" ]; then
              VIASH_PAR_INPUT_MULTI="$2"
            else
              VIASH_PAR_INPUT_MULTI="$VIASH_PAR_INPUT_MULTI:""$2"
            fi
            shift 2
            ;;
        --input_multi=*)
            if [ -z "$VIASH_PAR_INPUT_MULTI" ]; then
              VIASH_PAR_INPUT_MULTI=$(ViashRemoveFlags "$1")
            else
              VIASH_PAR_INPUT_MULTI="$VIASH_PAR_INPUT_MULTI:"$(ViashRemoveFlags "$1")
            fi
            shift 1
            ;;
        --input_opt)
            VIASH_PAR_INPUT_OPT="$2"
            shift 2
            ;;
        --input_opt=*)
            VIASH_PAR_INPUT_OPT=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --output_one)
            VIASH_PAR_OUTPUT_ONE="$2"
            shift 2
            ;;
        --output_one=*)
            VIASH_PAR_OUTPUT_ONE=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --output_multi)
            if [ -z "$VIASH_PAR_OUTPUT_MULTI" ]; then
              VIASH_PAR_OUTPUT_MULTI="$2"
            else
              VIASH_PAR_OUTPUT_MULTI="$VIASH_PAR_OUTPUT_MULTI:""$2"
            fi
            shift 2
            ;;
        --output_multi=*)
            if [ -z "$VIASH_PAR_OUTPUT_MULTI" ]; then
              VIASH_PAR_OUTPUT_MULTI=$(ViashRemoveFlags "$1")
            else
              VIASH_PAR_OUTPUT_MULTI="$VIASH_PAR_OUTPUT_MULTI:"$(ViashRemoveFlags "$1")
            fi
            shift 1
            ;;
        --output_opt)
            VIASH_PAR_OUTPUT_OPT="$2"
            shift 2
            ;;
        --output_opt=*)
            VIASH_PAR_OUTPUT_OPT=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --string)
            VIASH_PAR_STRING="$2"
            shift 2
            ;;
        --string=*)
            VIASH_PAR_STRING=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --integer)
            VIASH_PAR_INTEGER="$2"
            shift 2
            ;;
        --integer=*)
            VIASH_PAR_INTEGER=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --doubles)
            if [ -z "$VIASH_PAR_DOUBLES" ]; then
              VIASH_PAR_DOUBLES="$2"
            else
              VIASH_PAR_DOUBLES="$VIASH_PAR_DOUBLES:""$2"
            fi
            shift 2
            ;;
        --doubles=*)
            if [ -z "$VIASH_PAR_DOUBLES" ]; then
              VIASH_PAR_DOUBLES=$(ViashRemoveFlags "$1")
            else
              VIASH_PAR_DOUBLES="$VIASH_PAR_DOUBLES:"$(ViashRemoveFlags "$1")
            fi
            shift 1
            ;;
        --flag_true)
            VIASH_PAR_FLAG_TRUE=true
            shift 1
            ;;
        --flag_false)
            VIASH_PAR_FLAG_FALSE=false
            shift 1
            ;;
        --boolean)
            VIASH_PAR_BOOLEAN="$2"
            shift 2
            ;;
        --boolean=*)
            VIASH_PAR_BOOLEAN=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        ---setup)
            VIASH_MODE='docker_setup'
            VIASH_DOCKER_SETUP_STRATEGY="$2"
            shift 1
            ;;
        ---setup=*)
            VIASH_MODE='docker_setup'
            VIASH_DOCKER_SETUP_STRATEGY="$(ViashRemoveFlags "$1")"
            shift 2
            ;;
        ---dockerfile)
            ViashDockerfile
            exit 0
            ;;
        ---v|---volume)
            VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS -v "$2""
            shift 2
            ;;
        ---volume=*)
            VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS -v $(ViashRemoveFlags "$2")"
            shift 1
            ;;
        ---debug)
            VIASH_MODE='docker_debug'
            shift 1
            ;;
        *)  # positional arg or unknown option
            # since the positional args will be eval'd, can we always quote, instead of using ViashQuote
            VIASH_POSITIONAL_ARGS="$VIASH_POSITIONAL_ARGS '$1'"
            shift # past argument
            ;;
    esac
done

# parse positional parameters
eval set -- $VIASH_POSITIONAL_ARGS


ViashDockerInstallationCheck
if [ $VIASH_MODE == "docker_setup" ]; then
  ViashDockerSetup 'poc:latest' "$VIASH_DOCKER_SETUP_STRATEGY"
  exit 0
fi
ViashDockerSetup 'poc:latest' ifneedbepullelsecachedbuild
if [ $VIASH_MODE == "docker_debug" ]; then
  ViashNotice "+ docker run --entrypoint=bash -i --rm -v "$(pwd)":/pwd --workdir /pwd -t 'poc:latest'"
  docker run --entrypoint=bash -i --rm -v "$(pwd)":/pwd --workdir /pwd -t 'poc:latest'
  exit 0
fi




# check whether required parameters exist
if [ -z "$VIASH_PAR_INPUT_ONE" ]; then
  ViashError '--input_one' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z "$VIASH_PAR_INPUT_MULTI" ]; then
  ViashError '--input_multi' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z "$VIASH_PAR_OUTPUT_ONE" ]; then
  ViashError '--output_one' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z "$VIASH_PAR_STRING" ]; then
  VIASH_PAR_STRING="A string"
fi
if [ -z "$VIASH_PAR_INTEGER" ]; then
  VIASH_PAR_INTEGER="10"
fi
if [ -z "$VIASH_PAR_DOUBLES" ]; then
  VIASH_PAR_DOUBLES="5.5:4.5"
fi
if [ -z "$VIASH_PAR_FLAG_TRUE" ]; then
  VIASH_PAR_FLAG_TRUE="false"
fi
if [ -z "$VIASH_PAR_FLAG_FALSE" ]; then
  VIASH_PAR_FLAG_FALSE="true"
fi
if [ -z "$VIASH_PAR_BOOLEAN" ]; then
  VIASH_PAR_BOOLEAN="true"
fi


# detect volumes from file arguments
if [ ! -z "$VIASH_PAR_INPUT_ONE" ]; then
  VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS $(ViashAutodetectMountArg "$VIASH_PAR_INPUT_ONE")"
  VIASH_PAR_INPUT_ONE=$(ViashAutodetectMount "$VIASH_PAR_INPUT_ONE")
fi
if [ ! -z "$VIASH_PAR_INPUT_MULTI" ]; then
  IFS=":"
  for var in $VIASH_PAR_INPUT_MULTI; do
    unset IFS
    VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS $(ViashAutodetectMountArg "$var")"
    if [ -z "$VIASH_TEST_INPUT_MULTI" ]; then
      VIASH_TEST_INPUT_MULTI="$(ViashAutodetectMount "$var")"
    else
      VIASH_TEST_INPUT_MULTI="$VIASH_TEST_INPUT_MULTI:""$(ViashAutodetectMount "$var")"
    fi
  done
  VIASH_PAR_INPUT_MULTI="$VIASH_TEST_INPUT_MULTI"
fi
if [ ! -z "$VIASH_PAR_INPUT_OPT" ]; then
  VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS $(ViashAutodetectMountArg "$VIASH_PAR_INPUT_OPT")"
  VIASH_PAR_INPUT_OPT=$(ViashAutodetectMount "$VIASH_PAR_INPUT_OPT")
fi
if [ ! -z "$VIASH_PAR_OUTPUT_ONE" ]; then
  VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS $(ViashAutodetectMountArg "$VIASH_PAR_OUTPUT_ONE")"
  VIASH_PAR_OUTPUT_ONE=$(ViashAutodetectMount "$VIASH_PAR_OUTPUT_ONE")
fi
if [ ! -z "$VIASH_PAR_OUTPUT_MULTI" ]; then
  IFS=":"
  for var in $VIASH_PAR_OUTPUT_MULTI; do
    unset IFS
    VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS $(ViashAutodetectMountArg "$var")"
    if [ -z "$VIASH_TEST_OUTPUT_MULTI" ]; then
      VIASH_TEST_OUTPUT_MULTI="$(ViashAutodetectMount "$var")"
    else
      VIASH_TEST_OUTPUT_MULTI="$VIASH_TEST_OUTPUT_MULTI:""$(ViashAutodetectMount "$var")"
    fi
  done
  VIASH_PAR_OUTPUT_MULTI="$VIASH_TEST_OUTPUT_MULTI"
fi
if [ ! -z "$VIASH_PAR_OUTPUT_OPT" ]; then
  VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS $(ViashAutodetectMountArg "$VIASH_PAR_OUTPUT_OPT")"
  VIASH_PAR_OUTPUT_OPT=$(ViashAutodetectMount "$VIASH_PAR_OUTPUT_OPT")
fi

# Always mount the resource directory
VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS $(ViashAutodetectMountArg "$VIASH_META_RESOURCES_DIR")"
VIASH_META_RESOURCES_DIR=$(ViashAutodetectMount "$VIASH_META_RESOURCES_DIR")

# Always mount the VIASH_TEMP directory
VIASH_EXTRA_MOUNTS="$VIASH_EXTRA_MOUNTS $(ViashAutodetectMountArg "$VIASH_TEMP")"
VIASH_TEMP=$(ViashAutodetectMount "$VIASH_TEMP")
# change file ownership
function ViashPerformChown {
  
  if [ ! -z "$VIASH_PAR_OUTPUT_ONE" ]; then
    eval docker run --entrypoint=chown -i --rm $VIASH_EXTRA_MOUNTS poc:latest "$(id -u):$(id -g)" --silent --recursive "$VIASH_PAR_OUTPUT_ONE"
  fi
  if [ ! -z "$VIASH_PAR_OUTPUT_MULTI" ]; then
    IFS=":"
    for var in $VIASH_PAR_OUTPUT_MULTI; do
      unset IFS
      eval docker run --entrypoint=chown -i --rm $VIASH_EXTRA_MOUNTS poc:latest "$(id -u):$(id -g)" --silent --recursive "$var"
    done
    VIASH_PAR_OUTPUT_MULTI="$VIASH_TEST_OUTPUT_MULTI"
  fi
  if [ ! -z "$VIASH_PAR_OUTPUT_OPT" ]; then
    eval docker run --entrypoint=chown -i --rm $VIASH_EXTRA_MOUNTS poc:latest "$(id -u):$(id -g)" --silent --recursive "$VIASH_PAR_OUTPUT_OPT"
  fi
}
trap ViashPerformChown EXIT


cat << VIASHEOF | eval docker run --entrypoint=bash -i --rm $VIASH_EXTRA_MOUNTS poc:latest
set -e
tempscript=\$(mktemp "$VIASH_TEMP/viash-run-poc-XXXXXX")
function clean_up {
  rm "\$tempscript"
}
function interrupt {
  echo -e "\nCTRL-C Pressed..."
  exit 1
}
trap clean_up EXIT
trap interrupt INT SIGINT
cat > "\$tempscript" << 'VIASHMAIN'
## VIASH START
# The following code has been auto-generated by Viash.
# treat warnings as errors
viash_orig_warn_ <- options(warn = 2)

# get parameters from cli
par <- list(
  "input_one" = $( if [ ! -z ${VIASH_PAR_INPUT_ONE+x} ]; then echo "'${VIASH_PAR_INPUT_ONE//\'/\\\'}'"; else echo NULL; fi ),
  "input_multi" = $( if [ ! -z ${VIASH_PAR_INPUT_MULTI+x} ]; then echo "strsplit('${VIASH_PAR_INPUT_MULTI//\'/\\\'}', split = ':')[[1]]"; else echo NULL; fi ),
  "input_opt" = $( if [ ! -z ${VIASH_PAR_INPUT_OPT+x} ]; then echo "'${VIASH_PAR_INPUT_OPT//\'/\\\'}'"; else echo NULL; fi ),
  "output_one" = $( if [ ! -z ${VIASH_PAR_OUTPUT_ONE+x} ]; then echo "'${VIASH_PAR_OUTPUT_ONE//\'/\\\'}'"; else echo NULL; fi ),
  "output_multi" = $( if [ ! -z ${VIASH_PAR_OUTPUT_MULTI+x} ]; then echo "strsplit('${VIASH_PAR_OUTPUT_MULTI//\'/\\\'}', split = ':')[[1]]"; else echo NULL; fi ),
  "output_opt" = $( if [ ! -z ${VIASH_PAR_OUTPUT_OPT+x} ]; then echo "'${VIASH_PAR_OUTPUT_OPT//\'/\\\'}'"; else echo NULL; fi ),
  "string" = $( if [ ! -z ${VIASH_PAR_STRING+x} ]; then echo "'${VIASH_PAR_STRING//\'/\\\'}'"; else echo NULL; fi ),
  "integer" = $( if [ ! -z ${VIASH_PAR_INTEGER+x} ]; then echo "as.integer('${VIASH_PAR_INTEGER//\'/\\\'}')"; else echo NULL; fi ),
  "doubles" = $( if [ ! -z ${VIASH_PAR_DOUBLES+x} ]; then echo "as.numeric(strsplit('${VIASH_PAR_DOUBLES//\'/\\\'}', split = ':')[[1]])"; else echo NULL; fi ),
  "flag_true" = $( if [ ! -z ${VIASH_PAR_FLAG_TRUE+x} ]; then echo "as.logical(toupper('${VIASH_PAR_FLAG_TRUE//\'/\\\'}'))"; else echo NULL; fi ),
  "flag_false" = $( if [ ! -z ${VIASH_PAR_FLAG_FALSE+x} ]; then echo "as.logical(toupper('${VIASH_PAR_FLAG_FALSE//\'/\\\'}'))"; else echo NULL; fi ),
  "boolean" = $( if [ ! -z ${VIASH_PAR_BOOLEAN+x} ]; then echo "as.logical(toupper('${VIASH_PAR_BOOLEAN//\'/\\\'}'))"; else echo NULL; fi )
)

# get meta parameters
meta <- list(
  functionality_name = "$VIASH_META_FUNCTIONALITY_NAME",
  resources_dir = "$VIASH_META_RESOURCES_DIR",
  temp_dir = "$VIASH_TEMP"
)

# get resources dir
resources_dir = "$VIASH_META_RESOURCES_DIR"

# restore original warn setting
options(viash_orig_warn_)
rm(viash_orig_warn_)

## VIASH END
print(par)

print('""" test """')

input_one <- readr::read_lines(par\$input_one)
input_multi <- lapply(par\$input_multi, readr::read_lines)

readr::write_lines(c(input_one, par\$string), par\$output_one)

for (i in seq_along(input_multi)) {
  if (length(par\$output_multi) == 1 && grepl("\\\\*", par\$output_multi)) {
    path <- gsub("\\\\*", i, par\$output_multi)
  } else if (length(par\$output_multi) == length(input_multi)) {
    path <- par\$output_multi[[i]]
  } else {
    stop("Unexpected output_multi format.")
  }
  readr::write_lines(c(input_multi[[i]], par\$string), path)
}

if (!is.null(par\$input_opt)) {
  input_opt <- readr::read_lines(par\$input_opt)
  readr::write_lines(c(input_opt, par\$string), par\$output_opt)
}
VIASHMAIN
Rscript "\$tempscript" &
wait "\$!"

VIASHEOF
