#!/usr/bin/env bash

#############################
#    poc <not versioned>    #
#############################

# This wrapper script is auto-generated by viash 0.5.0 and is thus a derivative
# work thereof. This software comes with ABSOLUTELY NO WARRANTY from Data
# Intuitive.  The component may contain files which fall under a different
# license. The authors of this component should specify the license in the
# header of such files, or include a separate license file detailing the
# licenses of all included files.

set -e

if [ -z "$VIASH_TEMP" ]; then
  VIASH_TEMP=/tmp
fi

# define helper functions
# ViashQuote: put quotes around non flag values
# $1     : unquoted string
# return : possibly quoted string
# examples:
#   ViashQuote --foo      # returns --foo
#   ViashQuote bar        # returns 'bar'
#   Viashquote --foo=bar  # returns --foo='bar'
function ViashQuote {
  if [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+=.+$ ]]; then
    echo "$1" | sed "s#=\(.*\)#='\1'#"
  elif [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+$ ]]; then
    echo "$1"
  else
    echo "'$1'"
  fi
}
# ViashRemoveFlags: Remove leading flag
# $1     : string with a possible leading flag
# return : string without possible leading flag
# examples:
#   ViashRemoveFlags --foo=bar  # returns bar
function ViashRemoveFlags {
  echo "$1" | sed 's/^--*[a-zA-Z0-9_\-]*=//'
}
# ViashSourceDir: return the path of a bash file, following symlinks
# usage   : ViashSourceDir ${BASH_SOURCE[0]}
# $1      : Should always be set to ${BASH_SOURCE[0]}
# returns : The absolute path of the bash file
function ViashSourceDir {
  SOURCE="$1"
  while [ -h "$SOURCE" ]; do
    DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
    SOURCE="$(readlink "$SOURCE")"
    [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
  done
  cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd
}
VIASH_VERBOSITY=5

# see https://en.wikipedia.org/wiki/Syslog#Severity_level

# ViashLog: Log events depending on the verbosity level
# usage: ViashLog 1 alert Oh no something went wrong!
# $1: required verbosity level
# $2: display tag
# $3+: messages to display
# stdout: Your input, prepended by '[$2] '. 
function ViashLog {
  local required_level="$1"
  local display_tag="$2"
  shift 2
  if [ $VIASH_VERBOSITY -ge $required_level ]; then
    echo "[$display_tag]" "$@"
  fi
}

# ViashEmergency: log events when the system is unstable
# usage: ViashEmergency Oh no something went wrong.
# stdout: Your input, prepended by '[emergency] '. 
function ViashEmergency {
  ViashLog 0 emergency $@
}

# ViashAlert: log events when actions must be taken immediately (e.g. corrupted system database)
# usage: ViashAlert Oh no something went wrong.
# stdout: Your input, prepended by '[alert] '. 
function ViashAlert {
  ViashLog 1 alert $@
}

# ViashCritical: log events when a critical condition occurs
# usage: ViashCritical Oh no something went wrong.
# stdout: Your input, prepended by '[critical] '. 
function ViashCritical {
  ViashLog 2 critical $@
}

# ViashError: log events when an error condition occurs
# usage: ViashError Oh no something went wrong.
# stdout: Your input, prepended by '[error] '. 
function ViashError {
  ViashLog 3 error $@
}

# ViashWarning: log potentially abnormal events
# usage: ViashWarning Something may have gone wrong.
# stdout: Your input, prepended by '[warning] '. 
function ViashWarning {
  ViashLog 4 warning $@
}

# ViashNotice: log significant but normal events
# usage: ViashNotice This just happened.
# stdout: Your input, prepended by '[notice] '. 
function ViashNotice {
  ViashLog 5 notice $@
}

# ViashInfo: log normal events
# usage: ViashInfo This just happened.
# stdout: Your input, prepended by '[info] '. 
function ViashInfo {
  ViashLog 6 info $@
}

# ViashDebug: log all events, for debugging purposes
# usage: ViashDebug This just happened.
# stdout: Your input, prepended by '[debug] '. 
function ViashDebug {
  ViashLog 7 debug $@
}

# find source folder of this component
VIASH_RESOURCES_DIR=`ViashSourceDir ${BASH_SOURCE[0]}`


# ViashHelp: Display helpful explanation about this executable
function ViashHelp {
  echo "poc <not versioned>"
  echo
  echo "Options:"

  echo "   --input_one"
  echo "        type: file, required parameter"
  echo "        example: input.txt"
  echo "        Input one."
  echo ""


  echo "   --input_multi"
  echo "        type: file, required parameter, multiple values allowed"
  echo "        example: input.txt"
  echo "        Input multiple."
  echo ""


  echo "   --input_opt2"
  echo "        type: file"
  echo "        example: input.txt"
  echo "        Input optional."
  echo ""


  echo "   --output_one"
  echo "        type: file, required parameter, output"
  echo "        example: output.txt"
  echo "        Output one."
  echo ""


  echo "   --output_multi"
  echo "        type: file, required parameter, multiple values allowed, output"
  echo "        example: output.txt"
  echo "        Output multiple."
  echo ""


  echo "   --output_opt2"
  echo "        type: file, output"
  echo "        example: output.txt"
  echo "        Output optional."
  echo ""


  echo "   --string"
  echo "        type: string"
  echo "        default: A string"
  echo "        String"
  echo ""


  echo "   --integer"
  echo "        type: integer"
  echo "        default: 10"
  echo "        Integer"
  echo ""


  echo "   --double"
  echo "        type: double"
  echo "        default: 5.5"
  echo "        Double"
  echo ""


  echo "   --flag_true"
  echo "        type: boolean_true"
  echo "        Flag true"
  echo ""


  echo "   --flag_false"
  echo "        type: boolean_false"
  echo "        Flag false"
  echo ""


  echo "   --boolean"
  echo "        type: boolean"
  echo "        Boolean"
  echo ""

}

# initialise array
VIASH_POSITIONAL_ARGS=''

while [[ $# -gt 0 ]]; do
    case "$1" in
        -h|--help)
            ViashHelp
            exit
            ;;
        -v|--verbose)
            let "VIASH_VERBOSITY=VIASH_VERBOSITY+1"
            shift 1
            ;;
        -vv)
            let "VIASH_VERBOSITY=VIASH_VERBOSITY+2"
            shift 1
            ;;
        --verbosity)
            VIASH_VERBOSITY="$2"
            shift 2
            ;;
        --verbosity=*)
            VIASH_VERBOSITY="$(ViashRemoveFlags "$1")"
            shift 1
            ;;
        --version)
            echo "poc <not versioned>"
            exit
            ;;
        --input_one)
            VIASH_PAR_INPUT_ONE="$2"
            shift 2
            ;;
        --input_one=*)
            VIASH_PAR_INPUT_ONE=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --input_multi)
            if [ -z "$VIASH_PAR_INPUT_MULTI" ]; then
              VIASH_PAR_INPUT_MULTI="$2"
            else
              VIASH_PAR_INPUT_MULTI="$VIASH_PAR_INPUT_MULTI:""$2"
            fi
            shift 2
            ;;
        --input_multi=*)
            if [ -z "$VIASH_PAR_INPUT_MULTI" ]; then
              VIASH_PAR_INPUT_MULTI=$(ViashRemoveFlags "$1")
            else
              VIASH_PAR_INPUT_MULTI="$VIASH_PAR_INPUT_MULTI:"$(ViashRemoveFlags "$1")
            fi
            shift 1
            ;;
        --input_opt2)
            VIASH_PAR_INPUT_OPT2="$2"
            shift 2
            ;;
        --input_opt2=*)
            VIASH_PAR_INPUT_OPT2=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --output_one)
            VIASH_PAR_OUTPUT_ONE="$2"
            shift 2
            ;;
        --output_one=*)
            VIASH_PAR_OUTPUT_ONE=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --output_multi)
            if [ -z "$VIASH_PAR_OUTPUT_MULTI" ]; then
              VIASH_PAR_OUTPUT_MULTI="$2"
            else
              VIASH_PAR_OUTPUT_MULTI="$VIASH_PAR_OUTPUT_MULTI:""$2"
            fi
            shift 2
            ;;
        --output_multi=*)
            if [ -z "$VIASH_PAR_OUTPUT_MULTI" ]; then
              VIASH_PAR_OUTPUT_MULTI=$(ViashRemoveFlags "$1")
            else
              VIASH_PAR_OUTPUT_MULTI="$VIASH_PAR_OUTPUT_MULTI:"$(ViashRemoveFlags "$1")
            fi
            shift 1
            ;;
        --output_opt2)
            VIASH_PAR_OUTPUT_OPT2="$2"
            shift 2
            ;;
        --output_opt2=*)
            VIASH_PAR_OUTPUT_OPT2=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --string)
            VIASH_PAR_STRING="$2"
            shift 2
            ;;
        --string=*)
            VIASH_PAR_STRING=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --integer)
            VIASH_PAR_INTEGER="$2"
            shift 2
            ;;
        --integer=*)
            VIASH_PAR_INTEGER=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --double)
            VIASH_PAR_DOUBLE="$2"
            shift 2
            ;;
        --double=*)
            VIASH_PAR_DOUBLE=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --flag_true)
            VIASH_PAR_FLAG_TRUE=true
            shift 1
            ;;
        --flag_false)
            VIASH_PAR_FLAG_FALSE=false
            shift 1
            ;;
        --boolean)
            VIASH_PAR_BOOLEAN="$2"
            shift 2
            ;;
        --boolean=*)
            VIASH_PAR_BOOLEAN=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        *)  # positional arg or unknown option
            # since the positional args will be eval'd, can we always quote, instead of using ViashQuote
            VIASH_POSITIONAL_ARGS="$VIASH_POSITIONAL_ARGS '$1'"
            shift # past argument
            ;;
    esac
done

# parse positional parameters
eval set -- $VIASH_POSITIONAL_ARGS



# check whether required parameters exist
if [ -z "$VIASH_PAR_INPUT_ONE" ]; then
  ViashError '--input_one' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z "$VIASH_PAR_INPUT_MULTI" ]; then
  ViashError '--input_multi' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z "$VIASH_PAR_OUTPUT_ONE" ]; then
  ViashError '--output_one' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z "$VIASH_PAR_OUTPUT_MULTI" ]; then
  ViashError '--output_multi' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z "$VIASH_PAR_STRING" ]; then
  VIASH_PAR_STRING="A string"
fi
if [ -z "$VIASH_PAR_INTEGER" ]; then
  VIASH_PAR_INTEGER="10"
fi
if [ -z "$VIASH_PAR_DOUBLE" ]; then
  VIASH_PAR_DOUBLE="5.5"
fi
if [ -z "$VIASH_PAR_FLAG_TRUE" ]; then
  VIASH_PAR_FLAG_TRUE="false"
fi
if [ -z "$VIASH_PAR_FLAG_FALSE" ]; then
  VIASH_PAR_FLAG_FALSE="true"
fi


cat << VIASHEOF | bash
set -e
tempscript=\$(mktemp "$VIASH_TEMP/viash-run-poc-XXXXXX")
function clean_up {
  rm "\$tempscript"
}
trap clean_up EXIT
cat > "\$tempscript" << 'VIASHMAIN'
# The following code has been auto-generated by Viash.
par <- list(
  "input_one" = $( if [ ! -z ${VIASH_PAR_INPUT_ONE+x} ]; then echo "'$VIASH_PAR_INPUT_ONE'"; else echo NULL; fi ),
  "input_multi" = $( if [ ! -z ${VIASH_PAR_INPUT_MULTI+x} ]; then echo "strsplit('$VIASH_PAR_INPUT_MULTI', split = ':')[[1]]"; else echo NULL; fi ),
  "input_opt2" = $( if [ ! -z ${VIASH_PAR_INPUT_OPT2+x} ]; then echo "'$VIASH_PAR_INPUT_OPT2'"; else echo NULL; fi ),
  "output_one" = $( if [ ! -z ${VIASH_PAR_OUTPUT_ONE+x} ]; then echo "'$VIASH_PAR_OUTPUT_ONE'"; else echo NULL; fi ),
  "output_multi" = $( if [ ! -z ${VIASH_PAR_OUTPUT_MULTI+x} ]; then echo "strsplit('$VIASH_PAR_OUTPUT_MULTI', split = ':')[[1]]"; else echo NULL; fi ),
  "output_opt2" = $( if [ ! -z ${VIASH_PAR_OUTPUT_OPT2+x} ]; then echo "'$VIASH_PAR_OUTPUT_OPT2'"; else echo NULL; fi ),
  "string" = $( if [ ! -z ${VIASH_PAR_STRING+x} ]; then echo "'$VIASH_PAR_STRING'"; else echo NULL; fi ),
  "integer" = $( if [ ! -z ${VIASH_PAR_INTEGER+x} ]; then echo "as.integer($VIASH_PAR_INTEGER)"; else echo NULL; fi ),
  "double" = $( if [ ! -z ${VIASH_PAR_DOUBLE+x} ]; then echo "as.numeric($VIASH_PAR_DOUBLE)"; else echo NULL; fi ),
  "flag_true" = $( if [ ! -z ${VIASH_PAR_FLAG_TRUE+x} ]; then echo "as.logical(toupper('$VIASH_PAR_FLAG_TRUE'))"; else echo NULL; fi ),
  "flag_false" = $( if [ ! -z ${VIASH_PAR_FLAG_FALSE+x} ]; then echo "as.logical(toupper('$VIASH_PAR_FLAG_FALSE'))"; else echo NULL; fi ),
  "boolean" = $( if [ ! -z ${VIASH_PAR_BOOLEAN+x} ]; then echo "as.logical(toupper('$VIASH_PAR_BOOLEAN'))"; else echo NULL; fi )
)

resources_dir = "$VIASH_RESOURCES_DIR"

print(par)
VIASHMAIN
PATH="$VIASH_RESOURCES_DIR:\$PATH"

Rscript "\$tempscript"

VIASHEOF
